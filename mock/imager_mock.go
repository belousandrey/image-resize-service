// Automatically generated by MockGen. DO NOT EDIT!
// Source: ../imager.go

package mock

import (
	bytes "bytes"
	io "io"
	os "os"

	gomock "github.com/golang/mock/gomock"
)

// Mock of Imager interface
type MockImager struct {
	ctrl     *gomock.Controller
	recorder *_MockImagerRecorder
}

// Recorder for MockImager (not exported)
type _MockImagerRecorder struct {
	mock *MockImager
}

func NewMockImager(ctrl *gomock.Controller) *MockImager {
	mock := &MockImager{ctrl: ctrl}
	mock.recorder = &_MockImagerRecorder{mock}
	return mock
}

func (_m *MockImager) EXPECT() *_MockImagerRecorder {
	return _m.recorder
}

func (_m *MockImager) Open(path string) (*os.File, error) {
	ret := _m.ctrl.Call(_m, "Open", path)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockImagerRecorder) Open(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Open", arg0)
}

func (_m *MockImager) Decode(reader io.Reader) error {
	ret := _m.ctrl.Call(_m, "Decode", reader)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockImagerRecorder) Decode(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Decode", arg0)
}

func (_m *MockImager) Encode() (*bytes.Buffer, error) {
	ret := _m.ctrl.Call(_m, "Encode")
	ret0, _ := ret[0].(*bytes.Buffer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockImagerRecorder) Encode() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Encode")
}

func (_m *MockImager) EncodeToWriter(writer io.Writer) error {
	ret := _m.ctrl.Call(_m, "EncodeToWriter", writer)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockImagerRecorder) EncodeToWriter(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EncodeToWriter", arg0)
}

func (_m *MockImager) Resize(width uint, height uint) {
	_m.ctrl.Call(_m, "Resize", width, height)
}

func (_mr *_MockImagerRecorder) Resize(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Resize", arg0, arg1)
}

func (_m *MockImager) StoreResizedToTempFile() (string, error) {
	ret := _m.ctrl.Call(_m, "StoreResizedToTempFile")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockImagerRecorder) StoreResizedToTempFile() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StoreResizedToTempFile")
}
